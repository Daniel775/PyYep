{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"PyYep PyYep is a python schema builder for value parsing and validation. Define a schema, transform a value to match and validate the inputs with existing validator or custom functions. PyYep is heavily inspired by Yup Install pip install PyYep Usage You define and create schema objects with its inputs and validation methods. Then use the verify method to check the schema. A ValidationError will be raised if some input value does not match the validation. from PyYep import Schema , InputItem , ValidationError schema = Schema ([ InputItem ( 'name' , input_object , 'path-to-input_object-value-property-or-method' ) . string () . email (), InputItem ( 'name' , input_object , 'path-to-input_object-value-property-or-method' ) . number () . min ( 10 ) . max ( 100 ), ], abort_early = False ) // check validity try : result = schema . validate () # handle result except ValidationError : # handle fail","title":"Home"},{"location":"#pyyep","text":"PyYep is a python schema builder for value parsing and validation. Define a schema, transform a value to match and validate the inputs with existing validator or custom functions. PyYep is heavily inspired by Yup","title":"PyYep"},{"location":"#install","text":"pip install PyYep","title":"Install"},{"location":"#usage","text":"You define and create schema objects with its inputs and validation methods. Then use the verify method to check the schema. A ValidationError will be raised if some input value does not match the validation. from PyYep import Schema , InputItem , ValidationError schema = Schema ([ InputItem ( 'name' , input_object , 'path-to-input_object-value-property-or-method' ) . string () . email (), InputItem ( 'name' , input_object , 'path-to-input_object-value-property-or-method' ) . number () . min ( 10 ) . max ( 100 ), ], abort_early = False ) // check validity try : result = schema . validate () # handle result except ValidationError : # handle fail","title":"Usage"},{"location":"reference/PyYep/","text":"Module PyYep Allows simple schema parsing and validation for inputs. Classes: Schema InputItem StringValidator NumericValidator ValidationError View Source ''' Allows simple schema parsing and validation for inputs. Classes: Schema InputItem StringValidator NumericValidator ValidationError ''' from typing import Any , List , Optional , Callable , Union , Dict , TYPE_CHECKING from .validators import StringValidator , NumericValidator from .exceptions import ValidationError if TYPE_CHECKING : from .validators import Validator class Schema (): ''' A class to represent a schema. ... Attributes ---------- _inputs: Union[List[InputItem], List[Validator]] the schema inputs on_fail: Callable[[], None] a callable to be used as a error hook abort_early: bool sets if the schema will raise a exception soon after a validation error happens Methods ------- validate(): Execute the inputs validators and return a dict containing all the inputs' values ''' def __init__ ( self , inputs : Union [ List [ 'InputItem' ], List [ 'Validator' ]], on_fail : Optional [ Callable [[], None ]] = None , abort_early : Optional [ int ] = True ) -> None : ''' Constructs all the necessary attributes for the schema object. Parameters ---------- inputs (Union[List[InputItem], List[Validator]]): the schema inputs on_fail (Callable[[], None]): a callable to be used as a error hook abort_early (bool): sets if the schema will raise a exception soon after an error happens ''' for item in inputs : item . _set_parent_form ( self ) self . _inputs = inputs self . on_fail = on_fail self . abort_early = abort_early def validate ( self ) -> Dict [ str , Any ]: ''' Execute the inputs validators and return a dict containing all the inputs' values Raises ------- ValidationError: if any validation error happens in the inputs validation methods Returns ------- result (dict): a dict containing all the validated values ''' result = {} errors = [] for item in self . _inputs : try : result [ item . name ] = item . verify () except ValidationError as error : if self . abort_early : raise error errors . append ( error ) if not self . abort_early and errors : raise ValidationError ( '' , 'One or more inputs failed during validation' , inner = errors ) return result class InputItem (): ''' A class to represent a input item. ... Attributes ---------- name: str the name of the input item _form: Schema the parent schema _input: Any the input itself _path: str the property or method name that store the value in the input _validators: List[Callable[[Any], None]] a list of validators on_fail: Callable[[], None] a callable to be used as a local error hook Methods ------- _set_parent_form(form): Set the parent schema of the input item verify(result): Execute the inputs validators and return the result validate(validator): receives a validator and appends it on the validators list string(): create a StringValidator using the input item as base number(): create a NumericValidator using the input item as base ''' def __init__ ( self , name : str , input_ : Any , path : str , on_fail : Optional [ Callable [[], None ]] = None ): ''' Constructs all the necessary attributes for the input item object. Parameters ---------- name (str): the name of the input item input_ (Any): the input itself path (str): the property or method name that store the value in the input on_fail (Callable[[], None]): a callable to be used as a local error hook ''' self . name = name self . _form = None self . _input = input_ self . _path = path self . _validators = [] self . on_fail = on_fail def _set_parent_form ( self , form : Schema ) -> None : ''' Set the parent schema of the input item Parameters ---------- form : Schema the input item parent schema Returns ------- None ''' self . form = form def verify ( self , result : Optional [ Any ] = None ) -> Any : ''' Get the input value and execute all the validators Parameters ---------- result : Optional[Any] the value stored on the input, if not passed it will use the value returned by the method or attribute with the name stored on the input item _path attribute Raises: _______ ValidationError: if any error happens during the validation process Returns ------- result (Any): The value received after all the validation ''' if result is None : result = getattr ( self . _input , self . _path ) if callable ( result ): result = result () for validator in self . _validators : try : validator ( result ) except ValidationError as error : if self . on_fail is not None : self . on_fail () elif self . form . on_fail is not None : self . form . on_fail () raise error return result def validate ( self , validator : Callable [[ Any ], None ]) -> 'InputItem' : ''' Append a validator in the input item validators list Returns ------- self (InputItem): The input item itself ''' self . _validators . append ( validator ) return self def string ( self ) -> StringValidator : ''' create a StringValidator using the input item as base Returns ------- result (StringValidator): A string validator object ''' return StringValidator ( self ) def number ( self ) -> NumericValidator : ''' create a NumericValidator using the input item as base Returns ------- result (NumericValidator): A numeric validator object ''' return NumericValidator ( self ) Sub-modules PyYep.exceptions PyYep.validators Variables TYPE_CHECKING Classes InputItem class InputItem ( name : str , input_ : Any , path : str , on_fail : Union [ Callable [[], NoneType ], NoneType ] = None ) Attributes Name Type Description Default name str the name of the input item None _form Schema the parent schema None _input Any the input itself None _path str the property or method name that store the value in the input None _validators List[Callable[[Any], None]] a list of validators None on_fail Callable[[], None] a callable to be used as a local error hook None Methods None None None ------- None None None _set_parent_form(form) Set the parent schema of the input item None verify(result) Execute the inputs validators and return the result None validate(validator) receives a validator and appends it on the validators list None string() create a StringValidator using the input item as base None number() create a NumericValidator using the input item as base None View Source class InputItem () : ''' A class to represent a input item. ... Attributes ---------- name: str the name of the input item _form: Schema the parent schema _input: Any the input itself _path: str the property or method name that store the value in the input _validators: List[Callable[[Any], None]] a list of validators on_fail: Callable[[], None] a callable to be used as a local error hook Methods ------- _set_parent_form(form): Set the parent schema of the input item verify(result): Execute the inputs validators and return the result validate(validator): receives a validator and appends it on the validators list string(): create a StringValidator using the input item as base number(): create a NumericValidator using the input item as base ''' def __init__ ( self , name : str , input_ : Any , path : str , on_fail : Optional [ Callable[[ ] , None ]] = None ) : ''' Constructs all the necessary attributes for the input item object. Parameters ---------- name (str): the name of the input item input_ (Any): the input itself path (str): the property or method name that store the value in the input on_fail (Callable[[], None]): a callable to be used as a local error hook ''' self . name = name self . _form = None self . _input = input_ self . _path = path self . _validators = [] self . on_fail = on_fail def _set_parent_form ( self , form : Schema ) -> None : ''' Set the parent schema of the input item Parameters ---------- form : Schema the input item parent schema Returns ------- None ''' self . form = form def verify ( self , result : Optional [ Any ] = None ) -> Any : ''' Get the input value and execute all the validators Parameters ---------- result : Optional[Any] the value stored on the input, if not passed it will use the value returned by the method or attribute with the name stored on the input item _path attribute Raises: _______ ValidationError: if any error happens during the validation process Returns ------- result (Any): The value received after all the validation ''' if result is None : result = getattr ( self . _input , self . _path ) if callable ( result ) : result = result () for validator in self . _validators : try : validator ( result ) except ValidationError as error : if self . on_fail is not None : self . on_fail () elif self . form . on_fail is not None : self . form . on_fail () raise error return result def validate ( self , validator : Callable [ [Any ] , None ] ) -> 'InputItem' : ''' Append a validator in the input item validators list Returns ------- self (InputItem): The input item itself ''' self . _validators . append ( validator ) return self def string ( self ) -> StringValidator : ''' create a StringValidator using the input item as base Returns ------- result (StringValidator): A string validator object ''' return StringValidator ( self ) def number ( self ) -> NumericValidator : ''' create a NumericValidator using the input item as base Returns ------- result (NumericValidator): A numeric validator object ''' return NumericValidator ( self ) Methods number def number ( self ) -> PyYep . validators . NumericValidator create a NumericValidator using the input item as base Returns: Type Description A numeric validator object None View Source def number ( self ) -> NumericValidator : ''' create a NumericValidator using the input item as base Returns ------- result (NumericValidator): A numeric validator object ''' return NumericValidator ( self ) string def string ( self ) -> PyYep . validators . StringValidator create a StringValidator using the input item as base Returns: Type Description A string validator object None View Source def string ( self ) -> StringValidator : ''' create a StringValidator using the input item as base Returns ------- result (StringValidator): A string validator object ''' return StringValidator ( self ) validate def validate ( self , validator : Callable [[ Any ], NoneType ] ) -> 'InputItem' Append a validator in the input item validators list Returns: Type Description The input item itself None View Source def validate ( self , validator : Callable [ [Any ] , None ] ) -> 'InputItem' : ''' Append a validator in the input item validators list Returns ------- self (InputItem): The input item itself ''' self . _validators . append ( validator ) return self verify def verify ( self , result : Union [ Any , NoneType ] = None ) -> Any Get the input value and execute all the validators Parameters: Name Type Description Default result Optional[Any] the value stored on the input, if not passed it will use the value returned by the method or attribute with the name stored on the input item _path attribute None Raises None None _ None None None ValidationError if any error happens during the validation process None Returns: Type Description The value received after all the validation None View Source def verify ( self , result : Optional [ Any ] = None ) -> Any : ''' Get the input value and execute all the validators Parameters ---------- result : Optional[Any] the value stored on the input, if not passed it will use the value returned by the method or attribute with the name stored on the input item _path attribute Raises: _______ ValidationError: if any error happens during the validation process Returns ------- result (Any): The value received after all the validation ''' if result is None : result = getattr ( self . _input , self . _path ) if callable ( result ) : result = result () for validator in self . _validators : try : validator ( result ) except ValidationError as error : if self . on_fail is not None : self . on_fail () elif self . form . on_fail is not None : self . form . on_fail () raise error return result Schema class Schema ( inputs : Union [ List [ ForwardRef ( 'InputItem' )], List [ ForwardRef ( 'Validator' )]], on_fail : Union [ Callable [[], NoneType ], NoneType ] = None , abort_early : Union [ int , NoneType ] = True ) Attributes Name Type Description Default _inputs Union[List[InputItem], List[Validator]] the schema inputs None on_fail Callable[[], None] a callable to be used as a error hook None abort_early bool sets if the schema will raise a exception soon after a validation error happens None Methods None None None ------- None None None validate() Execute the inputs validators and return a dict containing all the inputs' values None View Source class Schema () : ''' A class to represent a schema. ... Attributes ---------- _inputs: Union[List[InputItem], List[Validator]] the schema inputs on_fail: Callable[[], None] a callable to be used as a error hook abort_early: bool sets if the schema will raise a exception soon after a validation error happens Methods ------- validate(): Execute the inputs validators and return a dict containing all the inputs' values ''' def __init__(self, inputs: Union[List[' InputItem '], List[' Validator ']], on_fail: Optional[Callable[[], None]] = None, abort_early: Optional[int] = True) -> None: ''' Constructs all the necessary attributes for the schema object . Parameters ---------- inputs ( Union [ List[InputItem ] , List [ Validator ] ] ) : the schema inputs on_fail ( Callable [ [ ] , None ] ) : a callable to be used as a error hook abort_early ( bool ) : sets if the schema will raise a exception soon after an error happens ''' for item in inputs: item._set_parent_form(self) self._inputs = inputs self.on_fail = on_fail self.abort_early = abort_early def validate(self) -> Dict[str, Any]: ''' Execute the inputs validators and return a dict containing all the inputs ' values Raises ------- ValidationError: if any validation error happens in the inputs validation methods Returns ------- result (dict): a dict containing all the validated values ''' result = {} errors = [] for item in self . _inputs : try : result [ item.name ] = item . verify () except ValidationError as error : if self . abort_early : raise error errors . append ( error ) if not self . abort_early and errors : raise ValidationError ( '' , 'One or more inputs failed during validation' , inner = errors ) return result Methods validate def validate ( self ) -> Dict [ str , Any ] Execute the inputs validators and return a dict containing all the inputs' values Raises ValidationError: if any validation error happens in the inputs validation methods Returns: Type Description a dict containing all the validated values None View Source def validate ( self ) -> Dict [ str , Any ]: ''' Execute the inputs validators and return a dict containing all the inputs' values Raises ------- ValidationError : if any validation error happens in the inputs validation methods Returns ------- result ( dict ): a dict containing all the validated values ''' result = {} errors = [] for item in self._inputs: try: result[item.name] = item.verify() except ValidationError as error: if self.abort_early: raise error errors.append(error) if not self.abort_early and errors: raise ValidationError('', ' One or more inputs failed during validation ' , inner = errors ) return result","title":"Index"},{"location":"reference/PyYep/#module-pyyep","text":"Allows simple schema parsing and validation for inputs. Classes: Schema InputItem StringValidator NumericValidator ValidationError View Source ''' Allows simple schema parsing and validation for inputs. Classes: Schema InputItem StringValidator NumericValidator ValidationError ''' from typing import Any , List , Optional , Callable , Union , Dict , TYPE_CHECKING from .validators import StringValidator , NumericValidator from .exceptions import ValidationError if TYPE_CHECKING : from .validators import Validator class Schema (): ''' A class to represent a schema. ... Attributes ---------- _inputs: Union[List[InputItem], List[Validator]] the schema inputs on_fail: Callable[[], None] a callable to be used as a error hook abort_early: bool sets if the schema will raise a exception soon after a validation error happens Methods ------- validate(): Execute the inputs validators and return a dict containing all the inputs' values ''' def __init__ ( self , inputs : Union [ List [ 'InputItem' ], List [ 'Validator' ]], on_fail : Optional [ Callable [[], None ]] = None , abort_early : Optional [ int ] = True ) -> None : ''' Constructs all the necessary attributes for the schema object. Parameters ---------- inputs (Union[List[InputItem], List[Validator]]): the schema inputs on_fail (Callable[[], None]): a callable to be used as a error hook abort_early (bool): sets if the schema will raise a exception soon after an error happens ''' for item in inputs : item . _set_parent_form ( self ) self . _inputs = inputs self . on_fail = on_fail self . abort_early = abort_early def validate ( self ) -> Dict [ str , Any ]: ''' Execute the inputs validators and return a dict containing all the inputs' values Raises ------- ValidationError: if any validation error happens in the inputs validation methods Returns ------- result (dict): a dict containing all the validated values ''' result = {} errors = [] for item in self . _inputs : try : result [ item . name ] = item . verify () except ValidationError as error : if self . abort_early : raise error errors . append ( error ) if not self . abort_early and errors : raise ValidationError ( '' , 'One or more inputs failed during validation' , inner = errors ) return result class InputItem (): ''' A class to represent a input item. ... Attributes ---------- name: str the name of the input item _form: Schema the parent schema _input: Any the input itself _path: str the property or method name that store the value in the input _validators: List[Callable[[Any], None]] a list of validators on_fail: Callable[[], None] a callable to be used as a local error hook Methods ------- _set_parent_form(form): Set the parent schema of the input item verify(result): Execute the inputs validators and return the result validate(validator): receives a validator and appends it on the validators list string(): create a StringValidator using the input item as base number(): create a NumericValidator using the input item as base ''' def __init__ ( self , name : str , input_ : Any , path : str , on_fail : Optional [ Callable [[], None ]] = None ): ''' Constructs all the necessary attributes for the input item object. Parameters ---------- name (str): the name of the input item input_ (Any): the input itself path (str): the property or method name that store the value in the input on_fail (Callable[[], None]): a callable to be used as a local error hook ''' self . name = name self . _form = None self . _input = input_ self . _path = path self . _validators = [] self . on_fail = on_fail def _set_parent_form ( self , form : Schema ) -> None : ''' Set the parent schema of the input item Parameters ---------- form : Schema the input item parent schema Returns ------- None ''' self . form = form def verify ( self , result : Optional [ Any ] = None ) -> Any : ''' Get the input value and execute all the validators Parameters ---------- result : Optional[Any] the value stored on the input, if not passed it will use the value returned by the method or attribute with the name stored on the input item _path attribute Raises: _______ ValidationError: if any error happens during the validation process Returns ------- result (Any): The value received after all the validation ''' if result is None : result = getattr ( self . _input , self . _path ) if callable ( result ): result = result () for validator in self . _validators : try : validator ( result ) except ValidationError as error : if self . on_fail is not None : self . on_fail () elif self . form . on_fail is not None : self . form . on_fail () raise error return result def validate ( self , validator : Callable [[ Any ], None ]) -> 'InputItem' : ''' Append a validator in the input item validators list Returns ------- self (InputItem): The input item itself ''' self . _validators . append ( validator ) return self def string ( self ) -> StringValidator : ''' create a StringValidator using the input item as base Returns ------- result (StringValidator): A string validator object ''' return StringValidator ( self ) def number ( self ) -> NumericValidator : ''' create a NumericValidator using the input item as base Returns ------- result (NumericValidator): A numeric validator object ''' return NumericValidator ( self )","title":"Module PyYep"},{"location":"reference/PyYep/#sub-modules","text":"PyYep.exceptions PyYep.validators","title":"Sub-modules"},{"location":"reference/PyYep/#variables","text":"TYPE_CHECKING","title":"Variables"},{"location":"reference/PyYep/#classes","text":"","title":"Classes"},{"location":"reference/PyYep/#inputitem","text":"class InputItem ( name : str , input_ : Any , path : str , on_fail : Union [ Callable [[], NoneType ], NoneType ] = None )","title":"InputItem"},{"location":"reference/PyYep/#attributes","text":"Name Type Description Default name str the name of the input item None _form Schema the parent schema None _input Any the input itself None _path str the property or method name that store the value in the input None _validators List[Callable[[Any], None]] a list of validators None on_fail Callable[[], None] a callable to be used as a local error hook None Methods None None None ------- None None None _set_parent_form(form) Set the parent schema of the input item None verify(result) Execute the inputs validators and return the result None validate(validator) receives a validator and appends it on the validators list None string() create a StringValidator using the input item as base None number() create a NumericValidator using the input item as base None View Source class InputItem () : ''' A class to represent a input item. ... Attributes ---------- name: str the name of the input item _form: Schema the parent schema _input: Any the input itself _path: str the property or method name that store the value in the input _validators: List[Callable[[Any], None]] a list of validators on_fail: Callable[[], None] a callable to be used as a local error hook Methods ------- _set_parent_form(form): Set the parent schema of the input item verify(result): Execute the inputs validators and return the result validate(validator): receives a validator and appends it on the validators list string(): create a StringValidator using the input item as base number(): create a NumericValidator using the input item as base ''' def __init__ ( self , name : str , input_ : Any , path : str , on_fail : Optional [ Callable[[ ] , None ]] = None ) : ''' Constructs all the necessary attributes for the input item object. Parameters ---------- name (str): the name of the input item input_ (Any): the input itself path (str): the property or method name that store the value in the input on_fail (Callable[[], None]): a callable to be used as a local error hook ''' self . name = name self . _form = None self . _input = input_ self . _path = path self . _validators = [] self . on_fail = on_fail def _set_parent_form ( self , form : Schema ) -> None : ''' Set the parent schema of the input item Parameters ---------- form : Schema the input item parent schema Returns ------- None ''' self . form = form def verify ( self , result : Optional [ Any ] = None ) -> Any : ''' Get the input value and execute all the validators Parameters ---------- result : Optional[Any] the value stored on the input, if not passed it will use the value returned by the method or attribute with the name stored on the input item _path attribute Raises: _______ ValidationError: if any error happens during the validation process Returns ------- result (Any): The value received after all the validation ''' if result is None : result = getattr ( self . _input , self . _path ) if callable ( result ) : result = result () for validator in self . _validators : try : validator ( result ) except ValidationError as error : if self . on_fail is not None : self . on_fail () elif self . form . on_fail is not None : self . form . on_fail () raise error return result def validate ( self , validator : Callable [ [Any ] , None ] ) -> 'InputItem' : ''' Append a validator in the input item validators list Returns ------- self (InputItem): The input item itself ''' self . _validators . append ( validator ) return self def string ( self ) -> StringValidator : ''' create a StringValidator using the input item as base Returns ------- result (StringValidator): A string validator object ''' return StringValidator ( self ) def number ( self ) -> NumericValidator : ''' create a NumericValidator using the input item as base Returns ------- result (NumericValidator): A numeric validator object ''' return NumericValidator ( self )","title":"Attributes"},{"location":"reference/PyYep/#methods","text":"","title":"Methods"},{"location":"reference/PyYep/#number","text":"def number ( self ) -> PyYep . validators . NumericValidator create a NumericValidator using the input item as base Returns: Type Description A numeric validator object None View Source def number ( self ) -> NumericValidator : ''' create a NumericValidator using the input item as base Returns ------- result (NumericValidator): A numeric validator object ''' return NumericValidator ( self )","title":"number"},{"location":"reference/PyYep/#string","text":"def string ( self ) -> PyYep . validators . StringValidator create a StringValidator using the input item as base Returns: Type Description A string validator object None View Source def string ( self ) -> StringValidator : ''' create a StringValidator using the input item as base Returns ------- result (StringValidator): A string validator object ''' return StringValidator ( self )","title":"string"},{"location":"reference/PyYep/#validate","text":"def validate ( self , validator : Callable [[ Any ], NoneType ] ) -> 'InputItem' Append a validator in the input item validators list Returns: Type Description The input item itself None View Source def validate ( self , validator : Callable [ [Any ] , None ] ) -> 'InputItem' : ''' Append a validator in the input item validators list Returns ------- self (InputItem): The input item itself ''' self . _validators . append ( validator ) return self","title":"validate"},{"location":"reference/PyYep/#verify","text":"def verify ( self , result : Union [ Any , NoneType ] = None ) -> Any Get the input value and execute all the validators Parameters: Name Type Description Default result Optional[Any] the value stored on the input, if not passed it will use the value returned by the method or attribute with the name stored on the input item _path attribute None Raises None None _ None None None ValidationError if any error happens during the validation process None Returns: Type Description The value received after all the validation None View Source def verify ( self , result : Optional [ Any ] = None ) -> Any : ''' Get the input value and execute all the validators Parameters ---------- result : Optional[Any] the value stored on the input, if not passed it will use the value returned by the method or attribute with the name stored on the input item _path attribute Raises: _______ ValidationError: if any error happens during the validation process Returns ------- result (Any): The value received after all the validation ''' if result is None : result = getattr ( self . _input , self . _path ) if callable ( result ) : result = result () for validator in self . _validators : try : validator ( result ) except ValidationError as error : if self . on_fail is not None : self . on_fail () elif self . form . on_fail is not None : self . form . on_fail () raise error return result","title":"verify"},{"location":"reference/PyYep/#schema","text":"class Schema ( inputs : Union [ List [ ForwardRef ( 'InputItem' )], List [ ForwardRef ( 'Validator' )]], on_fail : Union [ Callable [[], NoneType ], NoneType ] = None , abort_early : Union [ int , NoneType ] = True )","title":"Schema"},{"location":"reference/PyYep/#attributes_1","text":"Name Type Description Default _inputs Union[List[InputItem], List[Validator]] the schema inputs None on_fail Callable[[], None] a callable to be used as a error hook None abort_early bool sets if the schema will raise a exception soon after a validation error happens None Methods None None None ------- None None None validate() Execute the inputs validators and return a dict containing all the inputs' values None View Source class Schema () : ''' A class to represent a schema. ... Attributes ---------- _inputs: Union[List[InputItem], List[Validator]] the schema inputs on_fail: Callable[[], None] a callable to be used as a error hook abort_early: bool sets if the schema will raise a exception soon after a validation error happens Methods ------- validate(): Execute the inputs validators and return a dict containing all the inputs' values ''' def __init__(self, inputs: Union[List[' InputItem '], List[' Validator ']], on_fail: Optional[Callable[[], None]] = None, abort_early: Optional[int] = True) -> None: ''' Constructs all the necessary attributes for the schema object . Parameters ---------- inputs ( Union [ List[InputItem ] , List [ Validator ] ] ) : the schema inputs on_fail ( Callable [ [ ] , None ] ) : a callable to be used as a error hook abort_early ( bool ) : sets if the schema will raise a exception soon after an error happens ''' for item in inputs: item._set_parent_form(self) self._inputs = inputs self.on_fail = on_fail self.abort_early = abort_early def validate(self) -> Dict[str, Any]: ''' Execute the inputs validators and return a dict containing all the inputs ' values Raises ------- ValidationError: if any validation error happens in the inputs validation methods Returns ------- result (dict): a dict containing all the validated values ''' result = {} errors = [] for item in self . _inputs : try : result [ item.name ] = item . verify () except ValidationError as error : if self . abort_early : raise error errors . append ( error ) if not self . abort_early and errors : raise ValidationError ( '' , 'One or more inputs failed during validation' , inner = errors ) return result","title":"Attributes"},{"location":"reference/PyYep/#methods_1","text":"","title":"Methods"},{"location":"reference/PyYep/#validate_1","text":"def validate ( self ) -> Dict [ str , Any ] Execute the inputs validators and return a dict containing all the inputs' values","title":"validate"},{"location":"reference/PyYep/#raises","text":"ValidationError: if any validation error happens in the inputs validation methods Returns: Type Description a dict containing all the validated values None View Source def validate ( self ) -> Dict [ str , Any ]: ''' Execute the inputs validators and return a dict containing all the inputs' values Raises ------- ValidationError : if any validation error happens in the inputs validation methods Returns ------- result ( dict ): a dict containing all the validated values ''' result = {} errors = [] for item in self._inputs: try: result[item.name] = item.verify() except ValidationError as error: if self.abort_early: raise error errors.append(error) if not self.abort_early and errors: raise ValidationError('', ' One or more inputs failed during validation ' , inner = errors ) return result","title":"Raises"},{"location":"reference/PyYep/exceptions/","text":"Module PyYep.exceptions None None View Source from typing import Optional , List class ValidationError ( Exception ): ''' A class to represent a validation error. ... Attributes ---------- path : str the schema path of the input respnsable for the error or the schema name itself inner : Optional[List[ValidationError]] a list of inner error in case the exception is beeing raise for the schema and not a single input ''' def __init__ ( self , path : str , message : str , inner : Optional [ List [ 'ValidationError' ]] = []): ''' Constructs all the necessary attributes for the validation error object. Parameters ---------- path (str): the schema path of the input that failed or the schema itself message (str): The error message inner (list): takes a list of the internal error in the schema ''' super ( ValidationError , self ) . __init__ ( message ) self . path = path self . inner = inner Classes ValidationError class ValidationError ( path : str , message : str , inner : Union [ List [ ForwardRef ( 'ValidationError' )], NoneType ] = [] ) Attributes Name Type Description Default path str the schema path of the input respnsable for the error or the schema name itself None inner Optional[List[ValidationError]] a list of inner error in case the exception is beeing raise for the schema and not a single input None View Source class ValidationError ( Exception ) : ''' A class to represent a validation error. ... Attributes ---------- path : str the schema path of the input respnsable for the error or the schema name itself inner : Optional[List[ValidationError]] a list of inner error in case the exception is beeing raise for the schema and not a single input ''' def __init__ ( self , path : str , message : str , inner : Optional [ List['ValidationError' ] ] = [] ) : ''' Constructs all the necessary attributes for the validation error object. Parameters ---------- path (str): the schema path of the input that failed or the schema itself message (str): The error message inner (list): takes a list of the internal error in the schema ''' super ( ValidationError , self ). __init__ ( message ) self . path = path self . inner = inner Ancestors (in MRO) builtins.Exception builtins.BaseException Class variables args Methods with_traceback def with_traceback ( ... ) Exception.with_traceback(tb) -- set self. traceback to tb and return self.","title":"Exceptions"},{"location":"reference/PyYep/exceptions/#module-pyyepexceptions","text":"None None View Source from typing import Optional , List class ValidationError ( Exception ): ''' A class to represent a validation error. ... Attributes ---------- path : str the schema path of the input respnsable for the error or the schema name itself inner : Optional[List[ValidationError]] a list of inner error in case the exception is beeing raise for the schema and not a single input ''' def __init__ ( self , path : str , message : str , inner : Optional [ List [ 'ValidationError' ]] = []): ''' Constructs all the necessary attributes for the validation error object. Parameters ---------- path (str): the schema path of the input that failed or the schema itself message (str): The error message inner (list): takes a list of the internal error in the schema ''' super ( ValidationError , self ) . __init__ ( message ) self . path = path self . inner = inner","title":"Module PyYep.exceptions"},{"location":"reference/PyYep/exceptions/#classes","text":"","title":"Classes"},{"location":"reference/PyYep/exceptions/#validationerror","text":"class ValidationError ( path : str , message : str , inner : Union [ List [ ForwardRef ( 'ValidationError' )], NoneType ] = [] )","title":"ValidationError"},{"location":"reference/PyYep/exceptions/#attributes","text":"Name Type Description Default path str the schema path of the input respnsable for the error or the schema name itself None inner Optional[List[ValidationError]] a list of inner error in case the exception is beeing raise for the schema and not a single input None View Source class ValidationError ( Exception ) : ''' A class to represent a validation error. ... Attributes ---------- path : str the schema path of the input respnsable for the error or the schema name itself inner : Optional[List[ValidationError]] a list of inner error in case the exception is beeing raise for the schema and not a single input ''' def __init__ ( self , path : str , message : str , inner : Optional [ List['ValidationError' ] ] = [] ) : ''' Constructs all the necessary attributes for the validation error object. Parameters ---------- path (str): the schema path of the input that failed or the schema itself message (str): The error message inner (list): takes a list of the internal error in the schema ''' super ( ValidationError , self ). __init__ ( message ) self . path = path self . inner = inner","title":"Attributes"},{"location":"reference/PyYep/exceptions/#ancestors-in-mro","text":"builtins.Exception builtins.BaseException","title":"Ancestors (in MRO)"},{"location":"reference/PyYep/exceptions/#class-variables","text":"args","title":"Class variables"},{"location":"reference/PyYep/exceptions/#methods","text":"","title":"Methods"},{"location":"reference/PyYep/exceptions/#with_traceback","text":"def with_traceback ( ... ) Exception.with_traceback(tb) -- set self. traceback to tb and return self.","title":"with_traceback"},{"location":"reference/PyYep/validators/","text":"Module PyYep.validators None None View Source import re import decimal from typing import Any , TYPE_CHECKING from .exceptions import ValidationError if TYPE_CHECKING : from .__init__ import InputItem , Schema class Validator (): ''' A class to represent a base validator. ... Attributes ---------- input_ : any the input that will be validated name : str the name of the input that will be validated Methods ------- _set_parent_form(form): Set the parent schema required(): Append a required validator in the input's validators list _required(value): Verify if the received value is empty ''' def __init__ ( self , input_ : 'InputItem' ) -> None : ''' Constructs all the necessary attributes for the base validator object. Parameters ---------- input_ (InputItem): the input that will be validated ''' self . input_ = input_ self . name = input_ . name def _set_parent_form ( self , form : 'Schema' ) -> None : ''' Set the parent schema of the validator's input Parameters ---------- form : Schema the validator's input parent schema Returns ------- None ''' self . input_ . form = form def required ( self ) -> 'Validator' : ''' Append a required validator in the input's validators list Returns ------- self (Validator): The validator itself ''' self . input_ = self . input_ . validate ( self . _required ) return self def _required ( self , value : Any ) -> None : ''' Verify if the received value is empty Parameters ---------- value : (Any) the value that will be checked Raises ---------- ValidationError: if the value is empty or None Returns ________ None ''' if value is None or ( not value and value != 0 ): raise ValidationError ( self . name , 'Empty value passed to a required input' ) def verify ( self ): pass class StringValidator ( Validator ): ''' A class to represent a string validator, children of Validator. ... Methods ------- email(): Append a email validator in the input's validators list _email(value): Verify if the received value is a valid email address min(min): Append a minimum validator in the input's validators list _min(min, value): Verify if the length of the received value is equal or higher than the min max(max): Append a maximum validator in the input's validators list _max(max, value): Verify if the length of the received value is equal or lower than the max verify(): Get the validator's input value. If the value is not None converts it to a string and pass it to the input verify method ''' def email ( self ) -> 'StringValidator' : ''' Append a email validator in the input's validators list Returns ------- self (Validator): The validator itself ''' self . input_ = self . input_ . validate ( self . _email ) return self def _email ( self , value : str ) -> None : ''' Verify if the received value is a valid email address Parameters ---------- value : (str) the value that will be checked Raises ---------- ValidationError: if the value is not a valid email address Returns ________ None ''' if re . fullmatch ( r '[^@]+@[^@]+\\.[^@]+' , value ) is None : raise ValidationError ( self . name , 'Value for email type does not match a valid format' ) def min ( self , value : int ) -> 'StringValidator' : ''' Append a minimum validator in the input's validators list Parameters ---------- value : str the minimun length value that will be allowed Returns ------- self (Validator): The validator itself ''' self . input_ = self . input_ . validate ( lambda v : self . _min ( value , v )) return self def _min ( self , min : int , value : str ) -> None : ''' Verify if the length of the received value is equal or higher than the min Parameters ---------- value : (str) the value that will be checked min : (int) the minimun length allowed Raises ---------- ValidationError: if the value length is smaller than the min Returns ________ None ''' if len ( value ) < min : raise ValidationError ( self . name , 'Value too short received' ) def max ( self , value : int ) -> 'StringValidator' : ''' Append a maximum validator in the input's validators list Parameters ---------- value : str the maximun length value that will be allowed Returns ------- self (Validator): The validator itself ''' self . input_ = self . input_ . validate ( lambda v : self . _max ( value , v )) return self def _max ( self , max : int , value : str ) -> None : ''' Verify if the length of the received value is equal or lower than the max Parameters ---------- value : (str) the value that will be checked max : (int) the maximun length allowed Raises ---------- ValidationError: if the value length is larger than the max Returns ________ None ''' if len ( value ) > max : raise ValidationError ( self . name , 'Value too long received' ) def verify ( self ) -> dict : ''' Get the validator's input value. If the value is not None converts it to a string and pass it to the input verify method Returns ------- result (str): The value returned by the input verify method ''' result = getattr ( self . input_ . _input , self . input_ . _path ) if callable ( result ): result = result () if result is not None : result = str ( result ) result = self . input_ . verify ( result ) return result class NumericValidator ( Validator ): ''' A class to represent a Numeric validator, children of Validator. ... Methods ------- min(min): Append a minimum validator in the input's validators list _min(min, value): Verify if the received value is equal or higher than the min max(max): Append a maximum validator in the input's validators list _max(max, value): Verify if the received value is equal or lower than the max verify(): Get the validator's input value. If the value is not None converts it to a string and pass it to the input verify method ''' def min ( self , value : int ) -> 'NumericValidator' : ''' Append a minimum validator in the input's validators list Parameters ---------- value : int the minimun value that will be allowed Returns ------- self (Validator): The validator itself ''' self . input_ = self . input_ . validate ( lambda v : self . _min ( value , v )) return self def _min ( self , min : int , value : decimal . Decimal ) -> None : ''' Verify if the received value is equal or higher than the min Parameters ---------- value : (any) the value that will be checked min : (int) the minimun value allowed Raises ---------- ValidationError: if the value smaller than the min Returns ________ None ''' if value < min : raise ValidationError ( self . name , 'Value too small received' ) def max ( self , value : int ) -> 'NumericValidator' : ''' Append a maximum validator in the input's validators list Parameters ---------- value : str the maximun value that will be allowed Returns ------- self (Validator): The validator itself ''' self . input_ = self . input_ . validate ( lambda v : self . _max ( value , v )) return self def _max ( self , max : int , value : decimal . Decimal ) -> None : ''' Verify if the the received value is equal or lower than the max Parameters ---------- value : (any) the value that will be checked max : (int) the maximun length allowed Raises ---------- ValidationError: if the value is larger than the max Returns ________ None ''' if value > max : raise ValidationError ( self . name , 'Value too large received' ) def verify ( self ) -> dict : ''' Get the validator's input value, converts it to a Decimal and pass it to the input verify method Raises ---------- ValidationError: if the conversion operation to Decimal is invalid Returns ------- result (Decimal): The value returned by the input verify method ''' result = getattr ( self . input_ . _input , self . input_ . _path ) if callable ( result ): result = result () try : value = decimal . Decimal ( result ) except decimal . InvalidOperation : raise ValidationError ( self . name , 'Non-numeric value received in a numeric input' ) return self . input_ . verify ( value ) Variables TYPE_CHECKING Classes NumericValidator class NumericValidator ( input_ : 'InputItem' ) View Source class NumericValidator ( Validator ): ''' A class to represent a Numeric validator, children of Validator. ... Methods ------- min(min): Append a minimum validator in the input' s validators list _min ( min , value ): Verify if the received value is equal or higher than the min max ( max ): Append a maximum validator in the input's validators list _max ( max , value ): Verify if the received value is equal or lower than the max verify (): Get the validator's input value . If the value is not None converts it to a string and pass it to the input verify method ''' def min(self, value: int) -> ' NumericValidator': ''' Append a minimum validator in the input' s validators list Parameters ---------- value : int the minimun value that will be allowed Returns ------- self ( Validator ): The validator itself ''' self.input_ = self.input_.validate(lambda v: self._min(value, v)) return self def _min(self, min: int, value: decimal.Decimal) -> None: ''' Verify if the received value is equal or higher than the min Parameters ---------- value : ( any ) the value that will be checked min : ( int ) the minimun value allowed Raises ---------- ValidationError: if the value smaller than the min Returns ________ None ''' if value < min: raise ValidationError(self.name, ' Value too small received' ) def max ( self , value: int ) -> 'NumericValidator' : ''' Append a maximum validator in the input' s validators list Parameters ---------- value : str the maximun value that will be allowed Returns ------- self ( Validator ): The validator itself ''' self.input_ = self.input_.validate(lambda v: self._max(value, v)) return self def _max(self, max: int, value: decimal.Decimal) -> None: ''' Verify if the the received value is equal or lower than the max Parameters ---------- value : ( any ) the value that will be checked max : ( int ) the maximun length allowed Raises ---------- ValidationError: if the value is larger than the max Returns ________ None ''' if value > max: raise ValidationError(self.name, ' Value too large received' ) def verify ( self ) -> dict: ''' Get the validator' s input value , converts it to a Decimal and pass it to the input verify method Raises ---------- ValidationError: if the conversion operation to Decimal is invalid Returns ------- result ( Decimal ): The value returned by the input verify method ''' result = getattr(self.input_._input, self.input_._path) if callable(result): result = result() try: value = decimal.Decimal(result) except decimal.InvalidOperation: raise ValidationError(self.name, ' Non-numeric value received in a numeric input' ) return self . input_ . verify ( value ) Ancestors (in MRO) PyYep.validators.Validator Methods max def max ( self , value : int ) -> 'NumericValidator' Append a maximum validator in the input's validators list Parameters: Name Type Description Default value str the maximun value that will be allowed None Returns: Type Description The validator itself None View Source def max ( self , value : int ) -> 'NumericValidator' : ''' Append a maximum validator in the input' s validators list Parameters ---------- value : str the maximun value that will be allowed Returns ------- self ( Validator ): The validator itself '' ' self . input_ = self . input_ . validate ( lambda v : self . _max ( value , v )) return self min def min ( self , value : int ) -> 'NumericValidator' Append a minimum validator in the input's validators list Parameters: Name Type Description Default value int the minimun value that will be allowed None Returns: Type Description The validator itself None View Source def min ( self , value : int ) -> 'NumericValidator' : ''' Append a minimum validator in the input' s validators list Parameters ---------- value : int the minimun value that will be allowed Returns ------- self ( Validator ): The validator itself '' ' self . input_ = self . input_ . validate ( lambda v : self . _min ( value , v )) return self required def required ( self ) -> 'Validator' Append a required validator in the input's validators list Returns: Type Description The validator itself None View Source def required ( self ) -> 'Validator' : ''' Append a required validator in the input' s validators list Returns ------- self ( Validator ): The validator itself '' ' self . input_ = self . input_ . validate ( self . _required ) return self verify def verify ( self ) -> dict Get the validator's input value, converts it to a Decimal and pass it to the input verify method Raises ValidationError: if the conversion operation to Decimal is invalid Returns: Type Description The value returned by the input verify method None View Source def verify ( self ) -> dict : ''' Get the validator' s input value , converts it to a Decimal and pass it to the input verify method Raises ---------- ValidationError : if the conversion operation to Decimal is invalid Returns ------- result ( Decimal ): The value returned by the input verify method ''' result = getattr(self.input_._input, self.input_._path) if callable(result): result = result() try: value = decimal.Decimal(result) except decimal.InvalidOperation: raise ValidationError(self.name, ' Non - numeric value received in a numeric input ' ) return self . input_ . verify ( value ) StringValidator class StringValidator ( input_ : 'InputItem' ) View Source class StringValidator ( Validator ): ''' A class to represent a string validator, children of Validator. ... Methods ------- email(): Append a email validator in the input' s validators list _email ( value ): Verify if the received value is a valid email address min ( min ): Append a minimum validator in the input's validators list _min ( min , value ): Verify if the length of the received value is equal or higher than the min max ( max ): Append a maximum validator in the input's validators list _max ( max , value ): Verify if the length of the received value is equal or lower than the max verify (): Get the validator's input value . If the value is not None converts it to a string and pass it to the input verify method ''' def email(self) -> ' StringValidator': ''' Append a email validator in the input' s validators list Returns ------- self ( Validator ): The validator itself ''' self.input_ = self.input_.validate(self._email) return self def _email(self, value: str) -> None: ''' Verify if the received value is a valid email address Parameters ---------- value : ( str ) the value that will be checked Raises ---------- ValidationError: if the value is not a valid email address Returns ________ None ''' if re.fullmatch(r' [^@]+@[^@]+\\.[^@]+ ', value) is None: raise ValidationError(self.name, ' Value for email type does not match a valid format' ) def min ( self , value: int ) -> 'StringValidator' : ''' Append a minimum validator in the input' s validators list Parameters ---------- value : str the minimun length value that will be allowed Returns ------- self ( Validator ): The validator itself ''' self.input_ = self.input_.validate(lambda v: self._min(value, v)) return self def _min(self, min: int, value: str) -> None: ''' Verify if the length of the received value is equal or higher than the min Parameters ---------- value : ( str ) the value that will be checked min : ( int ) the minimun length allowed Raises ---------- ValidationError: if the value length is smaller than the min Returns ________ None ''' if len(value) < min: raise ValidationError(self.name, ' Value too short received' ) def max ( self , value: int ) -> 'StringValidator' : ''' Append a maximum validator in the input' s validators list Parameters ---------- value : str the maximun length value that will be allowed Returns ------- self ( Validator ): The validator itself ''' self.input_ = self.input_.validate(lambda v: self._max(value, v)) return self def _max(self, max: int, value: str) -> None: ''' Verify if the length of the received value is equal or lower than the max Parameters ---------- value : ( str ) the value that will be checked max : ( int ) the maximun length allowed Raises ---------- ValidationError: if the value length is larger than the max Returns ________ None ''' if len(value) > max: raise ValidationError(self.name, ' Value too long received' ) def verify ( self ) -> dict: ''' Get the validator' s input value . If the value is not None converts it to a string and pass it to the input verify method Returns ------- result ( str ): The value returned by the input verify method '' ' result = getattr ( self . input_ . _input , self . input_ . _path ) if callable ( result ): result = result () if result is not None: result = str ( result ) result = self . input_ . verify ( result ) return result Ancestors (in MRO) PyYep.validators.Validator Methods email def email ( self ) -> 'StringValidator' Append a email validator in the input's validators list Returns: Type Description The validator itself None View Source def email ( self ) -> 'StringValidator' : ''' Append a email validator in the input' s validators list Returns ------- self ( Validator ): The validator itself '' ' self . input_ = self . input_ . validate ( self . _email ) return self max def max ( self , value : int ) -> 'StringValidator' Append a maximum validator in the input's validators list Parameters: Name Type Description Default value str the maximun length value that will be allowed None Returns: Type Description The validator itself None View Source def max ( self , value : int ) -> 'StringValidator' : ''' Append a maximum validator in the input' s validators list Parameters ---------- value : str the maximun length value that will be allowed Returns ------- self ( Validator ): The validator itself '' ' self . input_ = self . input_ . validate ( lambda v : self . _max ( value , v )) return self min def min ( self , value : int ) -> 'StringValidator' Append a minimum validator in the input's validators list Parameters: Name Type Description Default value str the minimun length value that will be allowed None Returns: Type Description The validator itself None View Source def min ( self , value : int ) -> 'StringValidator' : ''' Append a minimum validator in the input' s validators list Parameters ---------- value : str the minimun length value that will be allowed Returns ------- self ( Validator ): The validator itself '' ' self . input_ = self . input_ . validate ( lambda v : self . _min ( value , v )) return self required def required ( self ) -> 'Validator' Append a required validator in the input's validators list Returns: Type Description The validator itself None View Source def required ( self ) -> 'Validator' : ''' Append a required validator in the input' s validators list Returns ------- self ( Validator ): The validator itself '' ' self . input_ = self . input_ . validate ( self . _required ) return self verify def verify ( self ) -> dict Get the validator's input value. If the value is not None converts it to a string and pass it to the input verify method Returns: Type Description The value returned by the input verify method None View Source def verify ( self ) -> dict : ''' Get the validator' s input value . If the value is not None converts it to a string and pass it to the input verify method Returns ------- result ( str ): The value returned by the input verify method '' ' result = getattr ( self . input_ . _input , self . input_ . _path ) if callable ( result ): result = result () if result is not None : result = str ( result ) result = self . input_ . verify ( result ) return result Validator class Validator ( input_ : 'InputItem' ) Attributes Name Type Description Default input_ any the input that will be validated None name str the name of the input that will be validated None Methods None None None ------- None None None _set_parent_form(form) Set the parent schema None required() Append a required validator in the input's validators list None _required(value) Verify if the received value is empty None View Source class Validator (): ''' A class to represent a base validator. ... Attributes ---------- input_ : any the input that will be validated name : str the name of the input that will be validated Methods ------- _set_parent_form(form): Set the parent schema required(): Append a required validator in the input' s validators list _required ( value ): Verify if the received value is empty ''' def __init__(self, input_: ' InputItem' ) -> None: ''' Constructs all the necessary attributes for the base validator object. Parameters ---------- input_ (InputItem): the input that will be validated ''' self . input_ = input_ self . name = input_ . name def _set_parent_form ( self , form: 'Schema' ) -> None: ''' Set the parent schema of the validator' s input Parameters ---------- form : Schema the validator's input parent schema Returns ------- None ''' self.input_.form = form def required(self) -> ' Validator': ''' Append a required validator in the input' s validators list Returns ------- self ( Validator ): The validator itself ''' self.input_ = self.input_.validate(self._required) return self def _required(self, value: Any) -> None: ''' Verify if the received value is empty Parameters ---------- value : ( Any ) the value that will be checked Raises ---------- ValidationError: if the value is empty or None Returns ________ None ''' if value is None or (not value and value != 0): raise ValidationError(self.name, ' Empty value passed to a required input' ) def verify ( self ): pass Descendants PyYep.validators.StringValidator PyYep.validators.NumericValidator Methods required def required ( self ) -> 'Validator' Append a required validator in the input's validators list Returns: Type Description The validator itself None View Source def required ( self ) -> 'Validator' : ''' Append a required validator in the input' s validators list Returns ------- self ( Validator ): The validator itself '' ' self . input_ = self . input_ . validate ( self . _required ) return self verify def verify ( self ) View Source def verify ( self ): pass","title":"Validators"},{"location":"reference/PyYep/validators/#module-pyyepvalidators","text":"None None View Source import re import decimal from typing import Any , TYPE_CHECKING from .exceptions import ValidationError if TYPE_CHECKING : from .__init__ import InputItem , Schema class Validator (): ''' A class to represent a base validator. ... Attributes ---------- input_ : any the input that will be validated name : str the name of the input that will be validated Methods ------- _set_parent_form(form): Set the parent schema required(): Append a required validator in the input's validators list _required(value): Verify if the received value is empty ''' def __init__ ( self , input_ : 'InputItem' ) -> None : ''' Constructs all the necessary attributes for the base validator object. Parameters ---------- input_ (InputItem): the input that will be validated ''' self . input_ = input_ self . name = input_ . name def _set_parent_form ( self , form : 'Schema' ) -> None : ''' Set the parent schema of the validator's input Parameters ---------- form : Schema the validator's input parent schema Returns ------- None ''' self . input_ . form = form def required ( self ) -> 'Validator' : ''' Append a required validator in the input's validators list Returns ------- self (Validator): The validator itself ''' self . input_ = self . input_ . validate ( self . _required ) return self def _required ( self , value : Any ) -> None : ''' Verify if the received value is empty Parameters ---------- value : (Any) the value that will be checked Raises ---------- ValidationError: if the value is empty or None Returns ________ None ''' if value is None or ( not value and value != 0 ): raise ValidationError ( self . name , 'Empty value passed to a required input' ) def verify ( self ): pass class StringValidator ( Validator ): ''' A class to represent a string validator, children of Validator. ... Methods ------- email(): Append a email validator in the input's validators list _email(value): Verify if the received value is a valid email address min(min): Append a minimum validator in the input's validators list _min(min, value): Verify if the length of the received value is equal or higher than the min max(max): Append a maximum validator in the input's validators list _max(max, value): Verify if the length of the received value is equal or lower than the max verify(): Get the validator's input value. If the value is not None converts it to a string and pass it to the input verify method ''' def email ( self ) -> 'StringValidator' : ''' Append a email validator in the input's validators list Returns ------- self (Validator): The validator itself ''' self . input_ = self . input_ . validate ( self . _email ) return self def _email ( self , value : str ) -> None : ''' Verify if the received value is a valid email address Parameters ---------- value : (str) the value that will be checked Raises ---------- ValidationError: if the value is not a valid email address Returns ________ None ''' if re . fullmatch ( r '[^@]+@[^@]+\\.[^@]+' , value ) is None : raise ValidationError ( self . name , 'Value for email type does not match a valid format' ) def min ( self , value : int ) -> 'StringValidator' : ''' Append a minimum validator in the input's validators list Parameters ---------- value : str the minimun length value that will be allowed Returns ------- self (Validator): The validator itself ''' self . input_ = self . input_ . validate ( lambda v : self . _min ( value , v )) return self def _min ( self , min : int , value : str ) -> None : ''' Verify if the length of the received value is equal or higher than the min Parameters ---------- value : (str) the value that will be checked min : (int) the minimun length allowed Raises ---------- ValidationError: if the value length is smaller than the min Returns ________ None ''' if len ( value ) < min : raise ValidationError ( self . name , 'Value too short received' ) def max ( self , value : int ) -> 'StringValidator' : ''' Append a maximum validator in the input's validators list Parameters ---------- value : str the maximun length value that will be allowed Returns ------- self (Validator): The validator itself ''' self . input_ = self . input_ . validate ( lambda v : self . _max ( value , v )) return self def _max ( self , max : int , value : str ) -> None : ''' Verify if the length of the received value is equal or lower than the max Parameters ---------- value : (str) the value that will be checked max : (int) the maximun length allowed Raises ---------- ValidationError: if the value length is larger than the max Returns ________ None ''' if len ( value ) > max : raise ValidationError ( self . name , 'Value too long received' ) def verify ( self ) -> dict : ''' Get the validator's input value. If the value is not None converts it to a string and pass it to the input verify method Returns ------- result (str): The value returned by the input verify method ''' result = getattr ( self . input_ . _input , self . input_ . _path ) if callable ( result ): result = result () if result is not None : result = str ( result ) result = self . input_ . verify ( result ) return result class NumericValidator ( Validator ): ''' A class to represent a Numeric validator, children of Validator. ... Methods ------- min(min): Append a minimum validator in the input's validators list _min(min, value): Verify if the received value is equal or higher than the min max(max): Append a maximum validator in the input's validators list _max(max, value): Verify if the received value is equal or lower than the max verify(): Get the validator's input value. If the value is not None converts it to a string and pass it to the input verify method ''' def min ( self , value : int ) -> 'NumericValidator' : ''' Append a minimum validator in the input's validators list Parameters ---------- value : int the minimun value that will be allowed Returns ------- self (Validator): The validator itself ''' self . input_ = self . input_ . validate ( lambda v : self . _min ( value , v )) return self def _min ( self , min : int , value : decimal . Decimal ) -> None : ''' Verify if the received value is equal or higher than the min Parameters ---------- value : (any) the value that will be checked min : (int) the minimun value allowed Raises ---------- ValidationError: if the value smaller than the min Returns ________ None ''' if value < min : raise ValidationError ( self . name , 'Value too small received' ) def max ( self , value : int ) -> 'NumericValidator' : ''' Append a maximum validator in the input's validators list Parameters ---------- value : str the maximun value that will be allowed Returns ------- self (Validator): The validator itself ''' self . input_ = self . input_ . validate ( lambda v : self . _max ( value , v )) return self def _max ( self , max : int , value : decimal . Decimal ) -> None : ''' Verify if the the received value is equal or lower than the max Parameters ---------- value : (any) the value that will be checked max : (int) the maximun length allowed Raises ---------- ValidationError: if the value is larger than the max Returns ________ None ''' if value > max : raise ValidationError ( self . name , 'Value too large received' ) def verify ( self ) -> dict : ''' Get the validator's input value, converts it to a Decimal and pass it to the input verify method Raises ---------- ValidationError: if the conversion operation to Decimal is invalid Returns ------- result (Decimal): The value returned by the input verify method ''' result = getattr ( self . input_ . _input , self . input_ . _path ) if callable ( result ): result = result () try : value = decimal . Decimal ( result ) except decimal . InvalidOperation : raise ValidationError ( self . name , 'Non-numeric value received in a numeric input' ) return self . input_ . verify ( value )","title":"Module PyYep.validators"},{"location":"reference/PyYep/validators/#variables","text":"TYPE_CHECKING","title":"Variables"},{"location":"reference/PyYep/validators/#classes","text":"","title":"Classes"},{"location":"reference/PyYep/validators/#numericvalidator","text":"class NumericValidator ( input_ : 'InputItem' ) View Source class NumericValidator ( Validator ): ''' A class to represent a Numeric validator, children of Validator. ... Methods ------- min(min): Append a minimum validator in the input' s validators list _min ( min , value ): Verify if the received value is equal or higher than the min max ( max ): Append a maximum validator in the input's validators list _max ( max , value ): Verify if the received value is equal or lower than the max verify (): Get the validator's input value . If the value is not None converts it to a string and pass it to the input verify method ''' def min(self, value: int) -> ' NumericValidator': ''' Append a minimum validator in the input' s validators list Parameters ---------- value : int the minimun value that will be allowed Returns ------- self ( Validator ): The validator itself ''' self.input_ = self.input_.validate(lambda v: self._min(value, v)) return self def _min(self, min: int, value: decimal.Decimal) -> None: ''' Verify if the received value is equal or higher than the min Parameters ---------- value : ( any ) the value that will be checked min : ( int ) the minimun value allowed Raises ---------- ValidationError: if the value smaller than the min Returns ________ None ''' if value < min: raise ValidationError(self.name, ' Value too small received' ) def max ( self , value: int ) -> 'NumericValidator' : ''' Append a maximum validator in the input' s validators list Parameters ---------- value : str the maximun value that will be allowed Returns ------- self ( Validator ): The validator itself ''' self.input_ = self.input_.validate(lambda v: self._max(value, v)) return self def _max(self, max: int, value: decimal.Decimal) -> None: ''' Verify if the the received value is equal or lower than the max Parameters ---------- value : ( any ) the value that will be checked max : ( int ) the maximun length allowed Raises ---------- ValidationError: if the value is larger than the max Returns ________ None ''' if value > max: raise ValidationError(self.name, ' Value too large received' ) def verify ( self ) -> dict: ''' Get the validator' s input value , converts it to a Decimal and pass it to the input verify method Raises ---------- ValidationError: if the conversion operation to Decimal is invalid Returns ------- result ( Decimal ): The value returned by the input verify method ''' result = getattr(self.input_._input, self.input_._path) if callable(result): result = result() try: value = decimal.Decimal(result) except decimal.InvalidOperation: raise ValidationError(self.name, ' Non-numeric value received in a numeric input' ) return self . input_ . verify ( value )","title":"NumericValidator"},{"location":"reference/PyYep/validators/#ancestors-in-mro","text":"PyYep.validators.Validator","title":"Ancestors (in MRO)"},{"location":"reference/PyYep/validators/#methods","text":"","title":"Methods"},{"location":"reference/PyYep/validators/#max","text":"def max ( self , value : int ) -> 'NumericValidator' Append a maximum validator in the input's validators list Parameters: Name Type Description Default value str the maximun value that will be allowed None Returns: Type Description The validator itself None View Source def max ( self , value : int ) -> 'NumericValidator' : ''' Append a maximum validator in the input' s validators list Parameters ---------- value : str the maximun value that will be allowed Returns ------- self ( Validator ): The validator itself '' ' self . input_ = self . input_ . validate ( lambda v : self . _max ( value , v )) return self","title":"max"},{"location":"reference/PyYep/validators/#min","text":"def min ( self , value : int ) -> 'NumericValidator' Append a minimum validator in the input's validators list Parameters: Name Type Description Default value int the minimun value that will be allowed None Returns: Type Description The validator itself None View Source def min ( self , value : int ) -> 'NumericValidator' : ''' Append a minimum validator in the input' s validators list Parameters ---------- value : int the minimun value that will be allowed Returns ------- self ( Validator ): The validator itself '' ' self . input_ = self . input_ . validate ( lambda v : self . _min ( value , v )) return self","title":"min"},{"location":"reference/PyYep/validators/#required","text":"def required ( self ) -> 'Validator' Append a required validator in the input's validators list Returns: Type Description The validator itself None View Source def required ( self ) -> 'Validator' : ''' Append a required validator in the input' s validators list Returns ------- self ( Validator ): The validator itself '' ' self . input_ = self . input_ . validate ( self . _required ) return self","title":"required"},{"location":"reference/PyYep/validators/#verify","text":"def verify ( self ) -> dict Get the validator's input value, converts it to a Decimal and pass it to the input verify method","title":"verify"},{"location":"reference/PyYep/validators/#raises","text":"ValidationError: if the conversion operation to Decimal is invalid Returns: Type Description The value returned by the input verify method None View Source def verify ( self ) -> dict : ''' Get the validator' s input value , converts it to a Decimal and pass it to the input verify method Raises ---------- ValidationError : if the conversion operation to Decimal is invalid Returns ------- result ( Decimal ): The value returned by the input verify method ''' result = getattr(self.input_._input, self.input_._path) if callable(result): result = result() try: value = decimal.Decimal(result) except decimal.InvalidOperation: raise ValidationError(self.name, ' Non - numeric value received in a numeric input ' ) return self . input_ . verify ( value )","title":"Raises"},{"location":"reference/PyYep/validators/#stringvalidator","text":"class StringValidator ( input_ : 'InputItem' ) View Source class StringValidator ( Validator ): ''' A class to represent a string validator, children of Validator. ... Methods ------- email(): Append a email validator in the input' s validators list _email ( value ): Verify if the received value is a valid email address min ( min ): Append a minimum validator in the input's validators list _min ( min , value ): Verify if the length of the received value is equal or higher than the min max ( max ): Append a maximum validator in the input's validators list _max ( max , value ): Verify if the length of the received value is equal or lower than the max verify (): Get the validator's input value . If the value is not None converts it to a string and pass it to the input verify method ''' def email(self) -> ' StringValidator': ''' Append a email validator in the input' s validators list Returns ------- self ( Validator ): The validator itself ''' self.input_ = self.input_.validate(self._email) return self def _email(self, value: str) -> None: ''' Verify if the received value is a valid email address Parameters ---------- value : ( str ) the value that will be checked Raises ---------- ValidationError: if the value is not a valid email address Returns ________ None ''' if re.fullmatch(r' [^@]+@[^@]+\\.[^@]+ ', value) is None: raise ValidationError(self.name, ' Value for email type does not match a valid format' ) def min ( self , value: int ) -> 'StringValidator' : ''' Append a minimum validator in the input' s validators list Parameters ---------- value : str the minimun length value that will be allowed Returns ------- self ( Validator ): The validator itself ''' self.input_ = self.input_.validate(lambda v: self._min(value, v)) return self def _min(self, min: int, value: str) -> None: ''' Verify if the length of the received value is equal or higher than the min Parameters ---------- value : ( str ) the value that will be checked min : ( int ) the minimun length allowed Raises ---------- ValidationError: if the value length is smaller than the min Returns ________ None ''' if len(value) < min: raise ValidationError(self.name, ' Value too short received' ) def max ( self , value: int ) -> 'StringValidator' : ''' Append a maximum validator in the input' s validators list Parameters ---------- value : str the maximun length value that will be allowed Returns ------- self ( Validator ): The validator itself ''' self.input_ = self.input_.validate(lambda v: self._max(value, v)) return self def _max(self, max: int, value: str) -> None: ''' Verify if the length of the received value is equal or lower than the max Parameters ---------- value : ( str ) the value that will be checked max : ( int ) the maximun length allowed Raises ---------- ValidationError: if the value length is larger than the max Returns ________ None ''' if len(value) > max: raise ValidationError(self.name, ' Value too long received' ) def verify ( self ) -> dict: ''' Get the validator' s input value . If the value is not None converts it to a string and pass it to the input verify method Returns ------- result ( str ): The value returned by the input verify method '' ' result = getattr ( self . input_ . _input , self . input_ . _path ) if callable ( result ): result = result () if result is not None: result = str ( result ) result = self . input_ . verify ( result ) return result","title":"StringValidator"},{"location":"reference/PyYep/validators/#ancestors-in-mro_1","text":"PyYep.validators.Validator","title":"Ancestors (in MRO)"},{"location":"reference/PyYep/validators/#methods_1","text":"","title":"Methods"},{"location":"reference/PyYep/validators/#email","text":"def email ( self ) -> 'StringValidator' Append a email validator in the input's validators list Returns: Type Description The validator itself None View Source def email ( self ) -> 'StringValidator' : ''' Append a email validator in the input' s validators list Returns ------- self ( Validator ): The validator itself '' ' self . input_ = self . input_ . validate ( self . _email ) return self","title":"email"},{"location":"reference/PyYep/validators/#max_1","text":"def max ( self , value : int ) -> 'StringValidator' Append a maximum validator in the input's validators list Parameters: Name Type Description Default value str the maximun length value that will be allowed None Returns: Type Description The validator itself None View Source def max ( self , value : int ) -> 'StringValidator' : ''' Append a maximum validator in the input' s validators list Parameters ---------- value : str the maximun length value that will be allowed Returns ------- self ( Validator ): The validator itself '' ' self . input_ = self . input_ . validate ( lambda v : self . _max ( value , v )) return self","title":"max"},{"location":"reference/PyYep/validators/#min_1","text":"def min ( self , value : int ) -> 'StringValidator' Append a minimum validator in the input's validators list Parameters: Name Type Description Default value str the minimun length value that will be allowed None Returns: Type Description The validator itself None View Source def min ( self , value : int ) -> 'StringValidator' : ''' Append a minimum validator in the input' s validators list Parameters ---------- value : str the minimun length value that will be allowed Returns ------- self ( Validator ): The validator itself '' ' self . input_ = self . input_ . validate ( lambda v : self . _min ( value , v )) return self","title":"min"},{"location":"reference/PyYep/validators/#required_1","text":"def required ( self ) -> 'Validator' Append a required validator in the input's validators list Returns: Type Description The validator itself None View Source def required ( self ) -> 'Validator' : ''' Append a required validator in the input' s validators list Returns ------- self ( Validator ): The validator itself '' ' self . input_ = self . input_ . validate ( self . _required ) return self","title":"required"},{"location":"reference/PyYep/validators/#verify_1","text":"def verify ( self ) -> dict Get the validator's input value. If the value is not None converts it to a string and pass it to the input verify method Returns: Type Description The value returned by the input verify method None View Source def verify ( self ) -> dict : ''' Get the validator' s input value . If the value is not None converts it to a string and pass it to the input verify method Returns ------- result ( str ): The value returned by the input verify method '' ' result = getattr ( self . input_ . _input , self . input_ . _path ) if callable ( result ): result = result () if result is not None : result = str ( result ) result = self . input_ . verify ( result ) return result","title":"verify"},{"location":"reference/PyYep/validators/#validator","text":"class Validator ( input_ : 'InputItem' )","title":"Validator"},{"location":"reference/PyYep/validators/#attributes","text":"Name Type Description Default input_ any the input that will be validated None name str the name of the input that will be validated None Methods None None None ------- None None None _set_parent_form(form) Set the parent schema None required() Append a required validator in the input's validators list None _required(value) Verify if the received value is empty None View Source class Validator (): ''' A class to represent a base validator. ... Attributes ---------- input_ : any the input that will be validated name : str the name of the input that will be validated Methods ------- _set_parent_form(form): Set the parent schema required(): Append a required validator in the input' s validators list _required ( value ): Verify if the received value is empty ''' def __init__(self, input_: ' InputItem' ) -> None: ''' Constructs all the necessary attributes for the base validator object. Parameters ---------- input_ (InputItem): the input that will be validated ''' self . input_ = input_ self . name = input_ . name def _set_parent_form ( self , form: 'Schema' ) -> None: ''' Set the parent schema of the validator' s input Parameters ---------- form : Schema the validator's input parent schema Returns ------- None ''' self.input_.form = form def required(self) -> ' Validator': ''' Append a required validator in the input' s validators list Returns ------- self ( Validator ): The validator itself ''' self.input_ = self.input_.validate(self._required) return self def _required(self, value: Any) -> None: ''' Verify if the received value is empty Parameters ---------- value : ( Any ) the value that will be checked Raises ---------- ValidationError: if the value is empty or None Returns ________ None ''' if value is None or (not value and value != 0): raise ValidationError(self.name, ' Empty value passed to a required input' ) def verify ( self ): pass","title":"Attributes"},{"location":"reference/PyYep/validators/#descendants","text":"PyYep.validators.StringValidator PyYep.validators.NumericValidator","title":"Descendants"},{"location":"reference/PyYep/validators/#methods_2","text":"","title":"Methods"},{"location":"reference/PyYep/validators/#required_2","text":"def required ( self ) -> 'Validator' Append a required validator in the input's validators list Returns: Type Description The validator itself None View Source def required ( self ) -> 'Validator' : ''' Append a required validator in the input' s validators list Returns ------- self ( Validator ): The validator itself '' ' self . input_ = self . input_ . validate ( self . _required ) return self","title":"required"},{"location":"reference/PyYep/validators/#verify_2","text":"def verify ( self ) View Source def verify ( self ): pass","title":"verify"}]}